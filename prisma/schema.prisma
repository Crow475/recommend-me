// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  image           String?
  bio             String?
  shareLikes      Boolean   @default(true)
  shareDislikes   Boolean   @default(false)
  shareStats      Boolean   @default(false)  
  reviews         Review[]  @relation(name: "isAuthorOf")
  comments        Comment[]
  likedReviews    Review[]  @relation(name: "liked")
  dislikedReviews Review[]  @relation(name: "disliked")
}

model Review {
  id           String    @id @default(cuid()) @unique
  authorId     String
  author       Profile   @relation(name: "isAuthorOf", fields: [authorId], references: [id], onDelete: Cascade)
  creationDate DateTime  @default(now())
  header       String
  image        String?
  content      String
  category     Category
  work         String
  rating       Int
  tags         String[]  @default([])
  comments     Comment[]
  likedBy      Profile[] @relation(name: "liked")
  dislikedBy   Profile[] @relation(name: "disliked")
  published    Boolean   @default(false)
}

model Comment {
  id           String  @id @default(cuid()) @unique
  authorId     String
  reviewId     String
  author       Profile @relation(fields: [authorId], references: [id], onDelete: Cascade)
  review       Review  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  content      String
  creationDate DateTime @default(now())
}

enum Category {
  VideoGame
  Book
  Movie
  TVSeries
}